name: Push

on:
  push:
    branches: [main]

env:
  TF_VERSION: 0.14.7
  TG_VERSION: 0.26.7
  TG_SRC_PATH: terraform
  TFC_WORKSPACE: dev

jobs:
  ci:
    name: Deploy Dev
    runs-on: ubuntu-20.04
    environment: dev

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      # - name: Read secrets from AWS Secrets Manager into environment variables
      #   uses: abhilash1in/aws-secrets-manager-action@v1.1.0
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION }}
      #     secrets: |
      #       dev/ParksResoPublic/GitHub/*
      #     parse-json: true

      # - name: Check if env variable is set after fetching secrets
      #   run: if [ -z ${DEV_PAKRSRESOPUBLIC_GITHUB_TEST_KEY+x} ]; then echo "DEV_PAKRSRESOPUBLIC_GITHUB_TEST_KEY is unset"; else echo "DEV_PAKRSRESOPUBLIC_GITHUB_TEST_KEY is set to '$DEV_PAKRSRESOPUBLIC_GITHUB'"; fi

      - name: build
        uses: actions/setup-node@v2
        with:
          node-version: 10

      - name: DEV API Pointing
        run: sed 's@http://localhost:3000@'"${{ secrets.API_URL }}"'@g' src/env.js.template | sed 's@\blocal\b@DEV@g' | sed 's@localAPI_PATH@dev@g' | sed 's@localAPI_PUBLIC_PATH@dev@g'> src/env.js

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
          role-session-name: parks-reso-public-dev-gh-action
          role-skip-session-tagging: true

      - uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "/parks-reso-public/test-key"
          env_variable_name: "TEST_VAR"

      - name: Check if env variable is set after fetching secrets
        run: if [ -z ${TEST_VAR+x} ]; then echo "TEST_VAR is unset"; else echo "TEST_VAR is set to '$DEV_PAKRSRESOPUBLIC_GITHUB'"; fi


      - name: Install and run build
        run: |
          npm i
          npm run build
        env:
          CI: true

      - name: Archive build
        if: success()
        uses: actions/upload-artifact@v1
        with:
          name: deploy_dist
          path: dist/parks-reso-public

      - name: Deploy to DEV S3
        env:
          s3_bucket: "${{ secrets.AWS_S3_BUCKET }}-dev"
          dir_name: ${{github.run_number}}
        run: |
          aws s3 sync dist/parks-reso-public/ s3://$s3_bucket/$dir_name/

      - name: Setup Terrafrom
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TFC_TEAM_TOKEN }}

      - name: Setup terragrunt
        uses: peter-murray/terragrunt-github-action@v1.0.0
        with:
          terragrunt_version: ${{ env.TG_VERSION }}

      - name: Terragrunt Apply
        working-directory: ${{ env.TG_SRC_PATH }}/${{ env.TFC_WORKSPACE }}
        env:
          app_version: ${{ github.run_number }}
          target_env: ${{ secrets.TARGET_ENV }}
          target_aws_account_id: ${{ secrets.TARGET_AWS_ACCOUNT_ID }}
          aws_region: ${{ secrets.AWS_REGION }}
          s3_bucket: ${{ secrets.AWS_S3_BUCKET }}
          s3_bucket_assets: ${{ secrets.AWS_S3_BUCKET_ASSETS }}
          s3_origin_id: ${{ secrets.S3_ORIGIN_ID }}
          domain_name: ${{ secrets.DOMAIN_NAME }}
          api_gateway_domain: ${{ secrets.API_GATEWAY_DOMAIN }}
          api_gateway_origin_id: ${{ secrets.API_GATEWAY_ORIGIN_ID }}
          api_gateway_path_pattern: ${{ secrets.API_GATEWAY_PATH_PATTERN }}
        run: terragrunt apply-all --terragrunt-non-interactive

