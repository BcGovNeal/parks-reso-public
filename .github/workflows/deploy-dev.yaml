name: Push

on:
  push:
    branches: [main]

env:
  TF_VERSION: 0.14.7
  TG_VERSION: 0.26.7
  TG_SRC_PATH: terraform
  TFC_WORKSPACE: dev

jobs:
  ci:
    name: Deploy Dev
    runs-on: ubuntu-20.04
    environment: dev

    steps:
      ### Get environment variables from AWS Parameter Store ###

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
          role-session-name: parks-reso-public-dev-gh-action
          role-skip-session-tagging: true

      # Public variables
      - uses: "marvinpinto/action-inject-ssm-secrets@v1.2.1"
        with:
          ssm_parameter: "/parks-reso-public/s3-bucket"
          env_variable_name: "S3_BUCKET"
      - uses: "marvinpinto/action-inject-ssm-secrets@v1.2.1"
        with:
          ssm_parameter: "/parks-reso-public/origin-id"
          env_variable_name: "ORIGIN_ID"

      # API variables
      - uses: "marvinpinto/action-inject-ssm-secrets@v1.2.1"
        with:
          ssm_parameter: /parks-reso-api/origin-domain
          env_variable_name: "API_GATEWAY_ORIGIN_DOMAIN"
      - uses: "marvinpinto/action-inject-ssm-secrets@v1.2.1"
        with:
          ssm_parameter: /parks-reso-api/origin-id
          env_variable_name: "API_GATEWAY_ORIGIN_ID"
      - uses: "marvinpinto/action-inject-ssm-secrets@v1.2.1"
        with:
          ssm_parameter: /parks-reso-api/gateway-path-pattern
          env_variable_name: "API_GATEWAY_PATH_PATTERN"

      # Shared variables
      - uses: "marvinpinto/action-inject-ssm-secrets@v1.2.1"
        with:
          ssm_parameter: "/parks-reso-shared/s3-bucket-assets"
          env_variable_name: "S3_BUCKET_ASSETS"

      ### Upload functions to S3 ###

      - name: Check out the repo
        uses: actions/checkout@v2

      - name: build
        uses: actions/setup-node@v2
        with:
          node-version: 10

      - name: Install and run build
        run: |
          npm i
          npm run build
        env:
          CI: true

      - name: DEV API Pointing
        run: sed 's@http://localhost:3000@'"https://${{ env.API_GATEWAY_ORIGIN_DOMAIN }}"'@g' src/env.js.template | sed 's@\blocal\b@DEV@g' | sed 's@localAPI_PATH@dev@g' | sed 's@localAPI_PUBLIC_PATH@dev@g'> src/env.js

      - name: Archive build
        if: success()
        uses: actions/upload-artifact@v1
        with:
          name: deploy_dist
          path: dist/parks-reso-public

      - name: Deploy to DEV S3
        env:
          s3_bucket: "${{ env.S3_BUCKET }}-dev"
          dir_name: ${{github.run_number}}
        run: |
          aws s3 sync dist/parks-reso-public/ s3://$s3_bucket/$dir_name/


      ### Run Terragrunt ###

      - name: Setup Terrafrom
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TFC_TEAM_TOKEN }}

      - name: Setup terragrunt
        uses: peter-murray/terragrunt-github-action@v1.0.0
        with:
          terragrunt_version: ${{ env.TG_VERSION }}

      - name: Terragrunt Apply
        working-directory: ${{ env.TG_SRC_PATH }}/${{ env.TFC_WORKSPACE }}
        env:
          app_version: ${{ github.run_number }}
          s3_bucket: ${{ env.S3_BUCKET }}
          s3_bucket_assets: ${{ env.S3_BUCKET_ASSETS }}
          origin_id: ${{ env.ORIGIN_ID }}
          api_gateway_origin_domain: ${{ env.API_GATEWAY_ORIGIN_DOMAIN }}
          api_gateway_origin_id: ${{ env.API_GATEWAY_ORIGIN_ID }}
          api_gateway_path_pattern: ${{ env.API_GATEWAY_PATH_PATTERN }}
          automation_role_arn: ${{ secrets.AUTOMATION_ROLE_ARN }}
        run: terragrunt apply-all --terragrunt-non-interactive

